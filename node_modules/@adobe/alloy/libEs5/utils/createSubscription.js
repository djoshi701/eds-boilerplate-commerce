"use strict";

exports.default = void 0;
var _index = require("./index.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var defaultPreprocessor = function defaultPreprocessor(params) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return args;
};

// eslint-disable-next-line no-unused-vars
var defaultEmissionCondition = function defaultEmissionCondition(params) {
  return true;
};
var createSubscription = function createSubscription() {
  var preprocessor = defaultPreprocessor;
  var emissionCondition = defaultEmissionCondition;
  var counter = 0;
  var subscriptions = {};
  var createUnsubscribe = function createUnsubscribe(id) {
    return function () {
      delete subscriptions[id];
    };
  };
  var add = function add(callback) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    if (typeof callback !== "function") {
      return function () {
        return undefined;
      };
    }
    counter += 1;
    subscriptions[counter] = {
      callback: callback,
      params: params
    };
    return createUnsubscribe(counter);
  };
  var setEmissionPreprocessor = function setEmissionPreprocessor(value) {
    if (typeof value === "function") {
      preprocessor = value;
    }
  };
  var setEmissionCondition = function setEmissionCondition(value) {
    if (typeof value === "function") {
      emissionCondition = value;
    }
  };
  var emit = function emit() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    (0, _index.values)(subscriptions).forEach(function (_ref) {
      var callback = _ref.callback,
        params = _ref.params;
      var result = preprocessor.apply(void 0, [params].concat(args));
      if (emissionCondition.apply(void 0, [params].concat(_toConsumableArray(result)))) {
        callback.apply(void 0, _toConsumableArray(result));
      }
    });
  };
  var hasSubscriptions = function hasSubscriptions() {
    return Object.keys(subscriptions).length > 0;
  };
  return {
    add: add,
    emit: emit,
    hasSubscriptions: hasSubscriptions,
    setEmissionPreprocessor: setEmissionPreprocessor,
    setEmissionCondition: setEmissionCondition
  };
};
var _default = exports.default = createSubscription;