"use strict";

exports.getPropositionEventType = exports.getEventType = exports.PropositionEventType = void 0;
var _eventType = require("./eventType.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2022 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var PropositionEventType = exports.PropositionEventType = {
  DISPLAY: "display",
  INTERACT: "interact",
  TRIGGER: "trigger",
  DISMISS: "dismiss"
};
var eventTypeToPropositionEventTypeMapping = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, _eventType.DISPLAY, PropositionEventType.DISPLAY), _eventType.INTERACT, PropositionEventType.INTERACT), _eventType.TRIGGER, PropositionEventType.TRIGGER), _eventType.DISMISS, PropositionEventType.DISMISS);
var propositionEventTypeToEventTypeMapping = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, PropositionEventType.DISPLAY, _eventType.DISPLAY), PropositionEventType.INTERACT, _eventType.INTERACT), PropositionEventType.TRIGGER, _eventType.TRIGGER), PropositionEventType.DISMISS, _eventType.DISMISS);
var getPropositionEventType = exports.getPropositionEventType = function getPropositionEventType(eventType) {
  return eventTypeToPropositionEventTypeMapping[eventType];
};
var getEventType = exports.getEventType = function getEventType(propositionEventType) {
  return propositionEventTypeToEventTypeMapping[propositionEventType];
};