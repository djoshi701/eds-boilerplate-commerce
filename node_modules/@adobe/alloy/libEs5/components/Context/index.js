"use strict";

exports.default = void 0;
var _injectWeb = require("./injectWeb.js");
var _injectDevice = require("./injectDevice.js");
var _injectEnvironment = require("./injectEnvironment.js");
var _injectPlaceContext = require("./injectPlaceContext.js");
var _injectTimestamp = require("./injectTimestamp.js");
var _implementationDetails = require("./implementationDetails.js");
var _createComponent = require("./createComponent.js");
var _injectHighEntropyUserAgentHints = require("./injectHighEntropyUserAgentHints.js");
var _index = require("../../utils/validation/index.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var web = (0, _injectWeb.default)(window);
var device = (0, _injectDevice.default)(window);
var environment = (0, _injectEnvironment.default)(window);
var placeContext = (0, _injectPlaceContext.default)(function () {
  return new Date();
});
var timestamp = (0, _injectTimestamp.default)(function () {
  return new Date();
});
var highEntropyUserAgentHints = (0, _injectHighEntropyUserAgentHints.default)(navigator);
var defaultEnabledContexts = {
  web: web,
  device: device,
  environment: environment,
  placeContext: placeContext
};
var defaultDisabledContexts = {
  highEntropyUserAgentHints: highEntropyUserAgentHints
};
var optionalContexts = _objectSpread(_objectSpread({}, defaultEnabledContexts), defaultDisabledContexts);
var requiredContexts = [timestamp, _implementationDetails.default];
var createContext = function createContext(_ref) {
  var config = _ref.config,
    logger = _ref.logger;
  return (0, _createComponent.default)(config, logger, optionalContexts, requiredContexts);
};
createContext.namespace = "Context";
createContext.configValidators = (0, _index.objectOf)({
  context: (0, _index.arrayOf)((0, _index.string)()).default(Object.keys(defaultEnabledContexts))
});
var _default = exports.default = createContext;