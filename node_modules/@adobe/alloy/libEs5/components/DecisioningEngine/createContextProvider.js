"use strict";

exports.default = void 0;
var _getBrowser = require("../../utils/getBrowser.js");
var _parseUrl = require("../../utils/parseUrl.js");
var _flattenObject = require("../../utils/flattenObject.js");
var _libraryVersion = require("../../constants/libraryVersion.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var eventRegistry = _ref.eventRegistry,
    window = _ref.window;
  var pageLoadTimestamp = new Date().getTime();
  var getBrowserContext = function getBrowserContext() {
    return {
      name: (0, _getBrowser.default)(window)
    };
  };
  var getPageContext = function getPageContext() {
    return _objectSpread({
      title: window.title,
      url: window.url
    }, (0, _parseUrl.default)(window.url));
  };
  var getReferrerContext = function getReferrerContext() {
    return _objectSpread({
      url: window.referrer
    }, (0, _parseUrl.default)(window.referrer));
  };
  var getTimeContext = function getTimeContext() {
    var now = new Date();
    var currentTimestamp = now.getTime();
    return {
      pageLoadTimestamp: pageLoadTimestamp,
      currentTimestamp: currentTimestamp,
      currentDate: now.getDate(),
      // Day of the week starts on Monday as is practiced in ISO 8601, but we want it to start on Sunday to match the authoring UI rule
      "~state.com.adobe.module.lifecycle/lifecyclecontextdata.dayofweek": now.getDay() + 1,
      "~state.com.adobe.module.lifecycle/lifecyclecontextdata.hourofday": now.getHours(),
      currentMinute: now.getMinutes(),
      currentMonth: now.getMonth(),
      currentYear: now.getFullYear(),
      pageVisitDuration: currentTimestamp - pageLoadTimestamp,
      "~timestampu": currentTimestamp / 1000,
      "~timestampz": now.toISOString()
    };
  };
  var getWindowContext = function getWindowContext() {
    var height = window.height;
    var width = window.width;
    var scrollY = window.scrollY;
    var scrollX = window.scrollX;
    return {
      height: height,
      width: width,
      scrollY: scrollY,
      scrollX: scrollX
    };
  };
  var coreGlobalContext = {
    browser: getBrowserContext(),
    page: getPageContext(),
    referringPage: getReferrerContext()
  };
  var getGlobalContext = function getGlobalContext() {
    return _objectSpread(_objectSpread(_objectSpread({}, coreGlobalContext), getTimeContext()), {}, {
      window: getWindowContext(),
      "~sdkver": _libraryVersion.default
    });
  };
  var getContext = function getContext() {
    var addedContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var context = _objectSpread(_objectSpread({}, getGlobalContext()), addedContext);
    return _objectSpread(_objectSpread({}, (0, _flattenObject.default)(context)), {}, {
      events: eventRegistry.toJSON()
    });
  };
  return {
    getContext: getContext
  };
};