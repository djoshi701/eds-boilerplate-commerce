"use strict";

exports.hasExperienceData = exports.getExpirationDate = exports.getDecisionProvider = exports.getActivityId = exports.createSaveStorage = exports.createRestoreStorage = exports.createInMemoryStorage = exports.clearLocalStorage = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var createRestoreStorage = exports.createRestoreStorage = function createRestoreStorage(storage, storageKey) {
  return function (defaultValue) {
    var stored = storage.getItem(storageKey);
    if (!stored) {
      return defaultValue;
    }
    try {
      return JSON.parse(stored);
    } catch (e) {
      return defaultValue;
    }
  };
};
var createSaveStorage = exports.createSaveStorage = function createSaveStorage(storage, storageKey) {
  var prepareFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (value) {
    return value;
  };
  return function (value) {
    storage.setItem(storageKey, JSON.stringify(prepareFn(value)));
  };
};
var getExpirationDate = exports.getExpirationDate = function getExpirationDate(retentionPeriod) {
  var expirationDate = new Date();
  expirationDate.setDate(expirationDate.getDate() - retentionPeriod);
  return expirationDate;
};
var getActivityId = exports.getActivityId = function getActivityId(proposition) {
  var _proposition$scopeDet = proposition.scopeDetails,
    scopeDetails = _proposition$scopeDet === void 0 ? {} : _proposition$scopeDet;
  var _scopeDetails$activit = scopeDetails.activity,
    activity = _scopeDetails$activit === void 0 ? {} : _scopeDetails$activit;
  var id = activity.id;
  return id;
};
var createInMemoryStorage = exports.createInMemoryStorage = function createInMemoryStorage() {
  var inMemoryStorage = {};
  return {
    getItem: function getItem(key) {
      return key in inMemoryStorage ? inMemoryStorage[key] : null;
    },
    setItem: function setItem(key, value) {
      inMemoryStorage[key] = value;
    }
  };
};
var clearLocalStorage = exports.clearLocalStorage = function clearLocalStorage(storage) {
  storage.clear();
};
var hasExperienceData = exports.hasExperienceData = function hasExperienceData(xdm) {
  var _xdm$eventType = xdm.eventType,
    eventType = _xdm$eventType === void 0 ? "" : _xdm$eventType,
    _experience = xdm._experience;
  if (!eventType || eventType === "") {
    return false;
  }
  if (!_experience || _typeof(_experience) !== "object") {
    return false;
  }
  return true;
};
var getDecisionProvider = exports.getDecisionProvider = function getDecisionProvider(proposition) {
  var _proposition$scopeDet2 = proposition.scopeDetails,
    scopeDetails = _proposition$scopeDet2 === void 0 ? {} : _proposition$scopeDet2;
  var decisionProvider = scopeDetails.decisionProvider;
  return decisionProvider;
};