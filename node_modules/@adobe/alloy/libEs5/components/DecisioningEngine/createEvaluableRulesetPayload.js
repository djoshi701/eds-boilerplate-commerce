"use strict";

exports.default = void 0;
var _aepRulesEngine = require("@adobe/aep-rules-engine");
var _schema = require("../../constants/schema.js");
var _eventType = require("../../constants/eventType.js");
var _utils = require("./utils.js");
var _flattenArray = require("../../utils/flattenArray.js");
var _createConsequenceAdapter = require("./createConsequenceAdapter.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var isRulesetItem = function isRulesetItem(item) {
  var schema = item.schema,
    data = item.data;
  if (schema === _schema.RULESET_ITEM) {
    return true;
  }
  if (schema !== _schema.JSON_CONTENT_ITEM) {
    return false;
  }
  try {
    var content = typeof data.content === "string" ? JSON.parse(data.content) : data.content;
    return content && Object.prototype.hasOwnProperty.call(content, "version") && Object.prototype.hasOwnProperty.call(content, "rules");
  } catch (error) {
    return false;
  }
};
var _default = exports.default = function _default(payload, eventRegistry, decisionHistory) {
  var consequenceAdapter = (0, _createConsequenceAdapter.default)();
  var activityId = (0, _utils.getActivityId)(payload);
  var items = [];
  var addItem = function addItem(item) {
    var _item$data = item.data,
      data = _item$data === void 0 ? {} : _item$data,
      schema = item.schema;
    var content = schema === _schema.RULESET_ITEM ? data : data.content;
    if (!content) {
      return;
    }
    items.push((0, _aepRulesEngine.default)(typeof content === "string" ? JSON.parse(content) : content));
  };
  var evaluate = function evaluate(context) {
    var displayEvent = eventRegistry.getEvent(_eventType.DISPLAY, activityId);
    var displayedDate = displayEvent ? displayEvent.firstTimestamp : undefined;
    var qualifyingItems = (0, _flattenArray.default)(items.map(function (item) {
      return item.execute(context);
    })).map(consequenceAdapter).map(function (item) {
      var _ref = decisionHistory.recordQualified(activityId) || {},
        qualifiedDate = _ref.firstTimestamp;
      return _objectSpread(_objectSpread({}, item), {}, {
        data: _objectSpread(_objectSpread({}, item.data), {}, {
          qualifiedDate: qualifiedDate,
          displayedDate: displayedDate
        })
      });
    });
    return _objectSpread(_objectSpread({}, payload), {}, {
      items: qualifyingItems
    });
  };
  if (Array.isArray(payload.items)) {
    payload.items.filter(isRulesetItem).forEach(addItem);
  }
  return {
    evaluate: evaluate,
    isEvaluable: items.length > 0
  };
};