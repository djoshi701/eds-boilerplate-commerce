"use strict";

exports.default = void 0;
var _index = require("../../utils/index.js");
var _constants = require("./constants/constants.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2024 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var trackMediaEvent = _ref.trackMediaEvent,
    trackMediaSession = _ref.trackMediaSession,
    mediaResponseHandler = _ref.mediaResponseHandler,
    logger = _ref.logger,
    createMediaHelper = _ref.createMediaHelper,
    createGetInstance = _ref.createGetInstance,
    config = _ref.config;
  return {
    lifecycle: {
      onBeforeEvent: function onBeforeEvent(_ref2) {
        var mediaOptions = _ref2.mediaOptions,
          _ref2$onResponse = _ref2.onResponse,
          onResponse = _ref2$onResponse === void 0 ? _index.noop : _ref2$onResponse;
        if (!mediaOptions) {
          return;
        }
        var legacy = mediaOptions.legacy,
          playerId = mediaOptions.playerId,
          getPlayerDetails = mediaOptions.getPlayerDetails;
        if (!legacy) {
          return;
        }
        onResponse(function (_ref3) {
          var response = _ref3.response;
          return mediaResponseHandler({
            playerId: playerId,
            getPlayerDetails: getPlayerDetails,
            response: response
          });
        });
      }
    },
    commands: {
      getMediaAnalyticsTracker: {
        run: function run() {
          if (!config.streamingMedia) {
            return Promise.reject(new Error("Streaming media is not configured."));
          }
          logger.info("Streaming media is configured in legacy mode.");
          var mediaAnalyticsHelper = createMediaHelper({
            logger: logger
          });
          return Promise.resolve(_objectSpread({
            getInstance: function getInstance() {
              return createGetInstance({
                logger: logger,
                trackMediaEvent: trackMediaEvent,
                trackMediaSession: trackMediaSession,
                uuid: _index.uuid
              });
            },
            Event: _constants.EVENT,
            MediaType: _constants.MEDIA_TYPE,
            PlayerState: _constants.PLAYER_STATE,
            StreamType: _constants.STREAM_TYPE,
            MediaObjectKey: _constants.MEDIA_OBJECT_KEYS,
            VideoMetadataKeys: _constants.VIDEO_METADATA_KEYS,
            AudioMetadataKeys: _constants.AUDIO_METADATA_KEYS,
            AdMetadataKeys: _constants.AD_METADATA_KEYS
          }, mediaAnalyticsHelper));
        }
      }
    }
  };
};