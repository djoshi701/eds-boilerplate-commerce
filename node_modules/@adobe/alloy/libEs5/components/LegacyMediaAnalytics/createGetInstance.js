"use strict";

exports.default = void 0;
var _constants = require("./constants/constants.js");
var _index = require("../../utils/index.js");
var _mediaKeysToXdmConverter = require("./constants/mediaKeysToXdmConverter.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2024 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var logger = _ref.logger,
    trackMediaSession = _ref.trackMediaSession,
    trackMediaEvent = _ref.trackMediaEvent,
    uuid = _ref.uuid;
  var trackerState = null;
  var instantiateTracker = function instantiateTracker() {
    trackerState = {
      qoe: null,
      lastPlayhead: 0,
      playerId: uuid()
    };
  };
  var getEventType = function getEventType(_ref2) {
    var eventType = _ref2.eventType;
    if (eventType === _constants.EVENT.BufferComplete || eventType === _constants.EVENT.SeekComplete) {
      return _constants.MEDIA_EVENTS_INTERNAL.Play;
    }
    if (eventType === _constants.EVENT.StateStart || eventType === _constants.EVENT.StateEnd) {
      return _constants.MEDIA_EVENTS_INTERNAL.StateUpdate;
    }
    if (eventType === _constants.EVENT.SeekStart) {
      return _constants.MEDIA_EVENTS_INTERNAL.Pause;
    }
    return eventType;
  };
  var createXdmObject = function createXdmObject(_ref3) {
    var eventType = _ref3.eventType,
      _ref3$mediaDetails = _ref3.mediaDetails,
      mediaDetails = _ref3$mediaDetails === void 0 ? {} : _ref3$mediaDetails,
      _ref3$contextData = _ref3.contextData,
      contextData = _ref3$contextData === void 0 ? [] : _ref3$contextData;
    var action = getEventType({
      eventType: eventType
    });
    if (eventType === _constants.EVENT.StateStart) {
      var _xdm = {
        eventType: "media." + action,
        mediaCollection: {
          statesStart: [mediaDetails]
        }
      };
      return _xdm;
    }
    if (eventType === _constants.EVENT.StateEnd) {
      var _xdm2 = {
        eventType: "media." + action,
        mediaCollection: {
          statesEnd: [mediaDetails]
        }
      };
      return _xdm2;
    }
    var xdm = {
      eventType: "media." + action,
      mediaCollection: _objectSpread({}, mediaDetails)
    };
    var customMetadata = [];
    Object.keys(contextData).forEach(function (key) {
      if (_mediaKeysToXdmConverter.mediaToXdmKeys[key]) {
        xdm.mediaCollection.sessionDetails[_mediaKeysToXdmConverter.mediaToXdmKeys[key]] = contextData[key];
      } else if (_mediaKeysToXdmConverter.adsToXdmKeys[key]) {
        xdm.mediaCollection.advertisingDetails[_mediaKeysToXdmConverter.adsToXdmKeys[key]] = contextData[key];
      } else {
        customMetadata.push({
          name: key,
          value: contextData[key]
        });
      }
    });
    if ((0, _index.isNonEmptyArray)(customMetadata)) {
      xdm.mediaCollection.customMetadata = customMetadata;
    }
    return xdm;
  };
  return {
    trackSessionStart: function trackSessionStart(mediaObject) {
      var contextData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if ((0, _index.isNil)(mediaObject) || (0, _index.isEmptyObject)(mediaObject)) {
        logger.warn("Invalid media object");
        return {};
      }
      if (trackerState === null) {
        logger.warn("The Media Session was completed. Restarting a new session.");
        instantiateTracker();
      }
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.SessionStart,
        mediaDetails: mediaObject,
        contextData: contextData
      });
      return trackMediaSession({
        playerId: trackerState.playerId,
        getPlayerDetails: function getPlayerDetails() {
          return {
            playhead: trackerState.lastPlayhead,
            qoeDataDetails: trackerState.qoe
          };
        },
        xdm: xdm
      });
    },
    trackPlay: function trackPlay() {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.Play
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    trackPause: function trackPause() {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.Pause
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    trackSessionEnd: function trackSessionEnd() {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.SessionEnd
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    trackComplete: function trackComplete() {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.SessionComplete
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    trackError: function trackError(errorId) {
      logger.warn("trackError(" + errorId + ")");
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      var errorDetails = {
        name: errorId,
        source: "player"
      };
      var xdm = createXdmObject({
        eventType: _constants.MEDIA_EVENTS_INTERNAL.Error,
        mediaDetails: {
          errorDetails: errorDetails
        }
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    trackEvent: function trackEvent(eventType, info, context) {
      if ((0, _index.isEmptyObject)(info)) {
        logger.warn("Invalid media object.");
        return {};
      }
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return {};
      }
      if (!(0, _index.includes)(Object.values(_constants.EVENT), eventType)) {
        logger.warn("Invalid event type");
        return {};
      }
      var xdm = createXdmObject({
        eventType: eventType,
        mediaDetails: info,
        contextData: context
      });
      return trackMediaEvent({
        playerId: trackerState.playerId,
        xdm: xdm
      });
    },
    updatePlayhead: function updatePlayhead(time) {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return;
      }
      if ((0, _index.isNumber)(time)) {
        trackerState.lastPlayhead = parseInt(time, 10);
      }
    },
    updateQoEObject: function updateQoEObject(qoeObject) {
      if (trackerState === null) {
        logger.warn("The Media Session was completed.");
        return;
      }
      if (!qoeObject) {
        return;
      }
      trackerState.qoe = qoeObject;
    },
    destroy: function destroy() {
      logger.warn("Destroy called, destroying the tracker.");
      trackerState = null;
    }
  };
};