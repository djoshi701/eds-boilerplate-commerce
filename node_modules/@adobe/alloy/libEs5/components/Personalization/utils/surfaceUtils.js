"use strict";

exports.normalizeSurfaces = exports.isPageWideSurface = exports.buildPageSurface = void 0;
var _surface = require("../constants/surface.js");
var _index = require("../../../utils/index.js");
/*
Copyright 2022 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var SURFACE_REGEX = /^(\w+):\/\/([^/#]+)(\/[^#]*)?(#.*)?$/;
var AUTHORITY_REGEX = /^(?:.*@)?(?:[a-z\d\u00a1-\uffff.-]+|\[[a-f\d:]+])(?::\d+)?$/;
var PATH_REGEX = /^\/(?:[/\w\u00a1-\uffff-.~]|%[a-fA-F\d]{2})*$/;
var FRAGMENT_REGEX = /^#(?:[/\w\u00a1-\uffff-.~]|%[a-fA-F\d]{2})+$/;
var normalizePath = function normalizePath() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
  var end = path.length;
  while (end > 0 && "/".indexOf(path.charAt(end - 1)) !== -1) {
    end -= 1;
  }
  return path.substring(0, end) || "/";
};
var getSurfaceType = function getSurfaceType(surfaceTypeMatch) {
  return (0, _index.isNonEmptyString)(surfaceTypeMatch) ? surfaceTypeMatch.toLowerCase() : "";
};
var getAuthority = function getAuthority(authorityMatch) {
  return (0, _index.isNonEmptyString)(authorityMatch) ? authorityMatch.toLowerCase() : "";
};
var getPath = function getPath(pathMatch) {
  return (0, _index.isNonEmptyString)(pathMatch) ? normalizePath(pathMatch) : "/";
};
var parseSurface = function parseSurface(surfaceString) {
  var matched = surfaceString.match(SURFACE_REGEX);
  return matched ? {
    surfaceType: getSurfaceType(matched[1]),
    authority: getAuthority(matched[2]),
    path: getPath(matched[3]),
    fragment: matched[4]
  } : null;
};
var stringifySurface = function stringifySurface(surface) {
  return "" + surface.surfaceType + _surface.SURFACE_TYPE_DELIMITER + surface.authority + (surface.path || "") + (surface.fragment || "");
};
var buildPageSurface = exports.buildPageSurface = function buildPageSurface(getPageLocation) {
  var location = getPageLocation();
  var host = location.host.toLowerCase();
  var path = location.pathname;
  return _surface.WEB + _surface.SURFACE_TYPE_DELIMITER + host + normalizePath(path);
};
var expandFragmentSurface = function expandFragmentSurface(surface, getPageLocation) {
  return (0, _index.startsWith)(surface, _surface.FRAGMENT_DELIMITER) ? buildPageSurface(getPageLocation) + surface : surface;
};
var validateSurface = function validateSurface(surface, getPageLocation, logger) {
  var invalidateSurface = function invalidateSurface(validationError) {
    logger.warn(validationError);
    return null;
  };
  if (!(0, _index.isNonEmptyString)(surface)) {
    return invalidateSurface("Invalid surface: " + surface);
  }
  var expanded = expandFragmentSurface(surface, getPageLocation);
  var parsed = parseSurface(expanded);
  if (parsed === null) {
    return invalidateSurface("Invalid surface: " + surface);
  }
  if (!(0, _index.includes)([_surface.WEB, _surface.WEBAPP], parsed.surfaceType)) {
    return invalidateSurface("Unsupported surface type " + parsed.surfaceType + " in surface: " + surface);
  }
  if (!parsed.authority || !AUTHORITY_REGEX.test(parsed.authority)) {
    return invalidateSurface("Invalid authority " + parsed.authority + " in surface: " + surface);
  }
  if (parsed.path && !PATH_REGEX.test(parsed.path)) {
    return invalidateSurface("Invalid path " + parsed.path + " in surface: " + surface);
  }
  if (parsed.fragment && !FRAGMENT_REGEX.test(parsed.fragment)) {
    return invalidateSurface("Invalid fragment " + parsed.fragment + " in surface: " + surface);
  }
  return parsed;
};
var isPageWideSurface = exports.isPageWideSurface = function isPageWideSurface(scope) {
  return !!scope && scope.indexOf(_surface.WEB + _surface.SURFACE_TYPE_DELIMITER) === 0 && scope.indexOf(_surface.FRAGMENT_DELIMITER) === -1;
};

// eslint-disable-next-line default-param-last
var normalizeSurfaces = exports.normalizeSurfaces = function normalizeSurfaces() {
  var surfaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var getPageLocation = arguments.length > 1 ? arguments[1] : undefined;
  var logger = arguments.length > 2 ? arguments[2] : undefined;
  return surfaces.map(function (surface) {
    return validateSurface(surface, getPageLocation, logger);
  }).filter(function (surface) {
    return !(0, _index.isNil)(surface);
  }).map(stringifySurface);
};