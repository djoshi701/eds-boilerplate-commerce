"use strict";

exports.is = exports.getRemoteScriptsUrls = exports.getInlineScripts = exports.executeRemoteScripts = exports.executeInlineScripts = void 0;
var _reactorLoadScript = require("@adobe/reactor-load-script");
var _index = require("../../../utils/dom/index.js");
var _tagName = require("../../../constants/tagName.js");
var _elementAttribute = require("../../../constants/elementAttribute.js");
var _index2 = require("./dom/index.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var is = exports.is = function is(element, tagName) {
  return !!element && element.tagName === tagName;
};
var isInlineScript = function isInlineScript(element) {
  return is(element, _tagName.SCRIPT) && !(0, _index2.getAttribute)(element, _elementAttribute.SRC);
};
var isRemoteScript = function isRemoteScript(element) {
  return is(element, _tagName.SCRIPT) && (0, _index2.getAttribute)(element, _elementAttribute.SRC);
};
var getInlineScripts = exports.getInlineScripts = function getInlineScripts(fragment) {
  var scripts = (0, _index.selectNodes)(_tagName.SCRIPT, fragment);
  var result = [];
  var length = scripts.length;
  var nonce = (0, _index2.getNonce)();
  var attributes = _objectSpread({}, nonce && {
    nonce: nonce
  });

  /* eslint-disable no-continue */
  for (var i = 0; i < length; i += 1) {
    var element = scripts[i];
    if (!isInlineScript(element)) {
      continue;
    }
    var textContent = element.textContent;
    if (!textContent) {
      continue;
    }
    result.push((0, _index.createNode)(_tagName.SCRIPT, attributes, {
      textContent: textContent
    }));
  }
  /* eslint-enable no-continue */

  return result;
};
var getRemoteScriptsUrls = exports.getRemoteScriptsUrls = function getRemoteScriptsUrls(fragment) {
  var scripts = (0, _index.selectNodes)(_tagName.SCRIPT, fragment);
  var result = [];
  var length = scripts.length;

  /* eslint-disable no-continue */
  for (var i = 0; i < length; i += 1) {
    var element = scripts[i];
    if (!isRemoteScript(element)) {
      continue;
    }
    var url = (0, _index2.getAttribute)(element, _elementAttribute.SRC);
    if (!url) {
      continue;
    }
    result.push(url);
  }
  /* eslint-enable no-continue */

  return result;
};
var executeInlineScripts = exports.executeInlineScripts = function executeInlineScripts(parent, scripts) {
  scripts.forEach(function (script) {
    parent.appendChild(script);
    parent.removeChild(script);
  });
};
var executeRemoteScripts = exports.executeRemoteScripts = function executeRemoteScripts(urls) {
  return Promise.all(urls.map(_reactorLoadScript.default));
};