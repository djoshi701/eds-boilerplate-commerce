"use strict";

exports.default = void 0;
var _matchesSelectorWithEq = require("../dom/matchesSelectorWithEq.js");
var _scopeType = require("../../constants/scopeType.js");
var _excluded = ["trackingLabel", "scopeType"];
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }
var getMetasIfMatches = function getMetasIfMatches(clickedElement, selector, getClickMetasBySelector) {
  var _document = document,
    documentElement = _document.documentElement;
  var element = clickedElement;
  var i = 0;
  while (element && element !== documentElement) {
    if ((0, _matchesSelectorWithEq.default)(selector, element)) {
      var matchedMetas = getClickMetasBySelector(selector);
      var returnValue = {
        metas: matchedMetas
      };
      var foundMetaWithLabel = matchedMetas.find(function (meta) {
        return meta.trackingLabel;
      });
      if (foundMetaWithLabel) {
        returnValue.label = foundMetaWithLabel.trackingLabel;
        returnValue.weight = i;
      }
      var foundMetaWithScopeTypeView = matchedMetas.find(function (meta) {
        return meta.scopeType === _scopeType.VIEW_SCOPE_TYPE;
      });
      if (foundMetaWithScopeTypeView) {
        returnValue.viewName = foundMetaWithScopeTypeView.scope;
        returnValue.weight = i;
      }
      return returnValue;
    }
    element = element.parentNode;
    i += 1;
  }
  return {
    metas: null
  };
};
var cleanMetas = function cleanMetas(metas) {
  return metas.map(function (meta) {
    var trackingLabel = meta.trackingLabel,
      scopeType = meta.scopeType,
      rest = _objectWithoutProperties(meta, _excluded);
    return rest;
  });
};
var dedupMetas = function dedupMetas(metas) {
  return metas.filter(function (meta, index) {
    var stringifiedMeta = JSON.stringify(meta);
    return index === metas.findIndex(function (innerMeta) {
      return JSON.stringify(innerMeta) === stringifiedMeta;
    });
  });
};
var _default = exports.default = function _default(clickedElement, selectors, getClickMetasBySelector) {
  var result = [];
  var resultLabel = "";
  var resultLabelWeight = Number.MAX_SAFE_INTEGER;
  var resultViewName;
  var resultViewNameWeight = Number.MAX_SAFE_INTEGER;

  /* eslint-disable no-continue */
  for (var i = 0; i < selectors.length; i += 1) {
    var _getMetasIfMatches = getMetasIfMatches(clickedElement, selectors[i], getClickMetasBySelector),
      metas = _getMetasIfMatches.metas,
      label = _getMetasIfMatches.label,
      weight = _getMetasIfMatches.weight,
      viewName = _getMetasIfMatches.viewName;
    if (!metas) {
      continue;
    }
    if (label && weight <= resultLabelWeight) {
      resultLabel = label;
      resultLabelWeight = weight;
    }
    if (viewName && weight <= resultViewNameWeight) {
      resultViewName = viewName;
      resultViewNameWeight = weight;
    }
    result.push.apply(result, _toConsumableArray(cleanMetas(metas)));
  }
  return {
    decisionsMeta: dedupMetas(result),
    eventLabel: resultLabel,
    viewName: resultViewName
  };
};