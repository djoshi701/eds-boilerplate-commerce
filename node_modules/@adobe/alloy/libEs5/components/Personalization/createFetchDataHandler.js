"use strict";

exports.default = void 0;
var _index = require("../../utils/index.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var DECISIONS_HANDLE = "personalization:decisions";
var _default = exports.default = function _default(_ref) {
  var prehidingStyle = _ref.prehidingStyle,
    showContainers = _ref.showContainers,
    hideContainers = _ref.hideContainers,
    mergeQuery = _ref.mergeQuery,
    processPropositions = _ref.processPropositions,
    createProposition = _ref.createProposition,
    notificationHandler = _ref.notificationHandler,
    consent = _ref.consent;
  return function (_ref2) {
    var cacheUpdate = _ref2.cacheUpdate,
      personalizationDetails = _ref2.personalizationDetails,
      event = _ref2.event,
      onResponse = _ref2.onResponse;
    var _consent$current = consent.current(),
      state = _consent$current.state,
      wasSet = _consent$current.wasSet;
    if (!(state === "out" && wasSet)) {
      if (personalizationDetails.isRenderDecisions()) {
        hideContainers(prehidingStyle);
      } else {
        showContainers();
      }
    }
    mergeQuery(event, personalizationDetails.createQueryDetails());

    // This needs to be called before the response so that future sendEvent calls
    // can know to wait until this request is complete for pending display notifications.
    var handleNotifications = notificationHandler(personalizationDetails.isRenderDecisions(), personalizationDetails.isSendDisplayEvent(), personalizationDetails.getViewName());
    onResponse(function (_ref3) {
      var response = _ref3.response;
      var handles = response.getPayloadsByType(DECISIONS_HANDLE);
      var propositions = handles.map(function (handle) {
        return createProposition(handle);
      });
      var _groupBy = (0, _index.groupBy)(propositions, function (p) {
          return p.getScopeType();
        }),
        _groupBy$page = _groupBy.page,
        pagePropositions = _groupBy$page === void 0 ? [] : _groupBy$page,
        _groupBy$view = _groupBy.view,
        viewPropositions = _groupBy$view === void 0 ? [] : _groupBy$view,
        _groupBy$proposition = _groupBy.proposition,
        nonRenderedPropositions = _groupBy$proposition === void 0 ? [] : _groupBy$proposition;
      var currentViewPropositions = cacheUpdate.update(viewPropositions);
      var render;
      var returnedPropositions;
      var returnedDecisions;
      if (personalizationDetails.isRenderDecisions()) {
        var _processPropositions = processPropositions([].concat(_toConsumableArray(pagePropositions), _toConsumableArray(currentViewPropositions)), nonRenderedPropositions);
        render = _processPropositions.render;
        returnedPropositions = _processPropositions.returnedPropositions;
        returnedDecisions = _processPropositions.returnedDecisions;
        render().then(handleNotifications);

        // Render could take a long time especially if one of the renders
        // is waiting for html to appear on the page. We show the containers
        // immediately, and whatever renders quickly will not have flicker.
        showContainers();
      } else {
        var _processPropositions2 = processPropositions([], [].concat(_toConsumableArray(pagePropositions), _toConsumableArray(currentViewPropositions), _toConsumableArray(nonRenderedPropositions)));
        returnedPropositions = _processPropositions2.returnedPropositions;
        returnedDecisions = _processPropositions2.returnedDecisions;
      }
      return {
        propositions: returnedPropositions,
        decisions: returnedDecisions
      };
    });
  };
};