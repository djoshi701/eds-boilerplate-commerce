"use strict";

exports.default = void 0;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var schemaProcessors = _ref.schemaProcessors,
    logger = _ref.logger;
  var wrapRenderWithLogging = function wrapRenderWithLogging(render, item) {
    return function () {
      return Promise.resolve().then(render).then(function () {
        if (logger.enabled) {
          logger.info("Action " + item.toString() + " executed.");
        }
        return true;
      }).catch(function (error) {
        if (logger.enabled) {
          var message = error.message,
            stack = error.stack;
          var warning = "Failed to execute action " + item.toString() + ". " + message + " " + stack;
          logger.warn(warning);
        }
        return false;
      });
    };
  };
  var renderItems = function renderItems(renderers, meta) {
    return Promise.all(renderers.map(function (renderer) {
      return renderer();
    })).then(function (successes) {
      // as long as at least one renderer succeeds, we want to add the notification
      // to the display notifications
      if (!successes.includes(true)) {
        return undefined;
      }
      return meta;
    });
  };
  var processItem = function processItem(item) {
    var processor = schemaProcessors[item.getSchema()];
    if (!processor) {
      return {};
    }
    return processor(item);
  };
  var processItems = function processItems(_ref2) {
    var existingRenderers = _ref2.renderers,
      existingReturnedPropositions = _ref2.returnedPropositions,
      existingReturnedDecisions = _ref2.returnedDecisions,
      items = _ref2.items,
      proposition = _ref2.proposition;
    var renderers = _toConsumableArray(existingRenderers);
    var returnedPropositions = _toConsumableArray(existingReturnedPropositions);
    var returnedDecisions = _toConsumableArray(existingReturnedDecisions);
    var renderedItems = [];
    var nonRenderedItems = [];
    var itemRenderers = [];
    var atLeastOneWithNotification = false;
    var render;
    var setRenderAttempted;
    var includeInNotification;
    var onlyRenderThis = false;
    var i = 0;
    var item;
    while (items.length > i) {
      item = items[i];
      var _processItem = processItem(item);
      render = _processItem.render;
      setRenderAttempted = _processItem.setRenderAttempted;
      includeInNotification = _processItem.includeInNotification;
      onlyRenderThis = _processItem.onlyRenderThis;
      if (onlyRenderThis) {
        returnedPropositions = [];
        returnedDecisions = [];
        if (setRenderAttempted) {
          renderedItems = [item];
          nonRenderedItems = [];
        } else {
          renderedItems = [];
          nonRenderedItems = [item];
        }
        renderers = [];
        itemRenderers = [render];
        atLeastOneWithNotification = includeInNotification;
        break;
      }
      if (render) {
        itemRenderers.push(wrapRenderWithLogging(render, item));
      }
      if (includeInNotification) {
        atLeastOneWithNotification = true;
      }
      if (setRenderAttempted) {
        renderedItems.push(item);
      } else {
        nonRenderedItems.push(item);
      }
      i += 1;
    }
    if (itemRenderers.length > 0) {
      var meta = atLeastOneWithNotification ? proposition.getNotification() : undefined;
      renderers.push(function () {
        return renderItems(itemRenderers, meta);
      });
    } else if (atLeastOneWithNotification) {
      renderers.push(function () {
        return proposition.getNotification();
      });
    }
    if (renderedItems.length > 0) {
      proposition.addToReturnValues(returnedPropositions, returnedDecisions, renderedItems, true);
    }
    if (nonRenderedItems.length > 0) {
      proposition.addToReturnValues(returnedPropositions, returnedDecisions, nonRenderedItems, false);
    }
    return {
      renderers: renderers,
      returnedPropositions: returnedPropositions,
      returnedDecisions: returnedDecisions,
      onlyRenderThis: onlyRenderThis
    };
  };
  return function (renderPropositions) {
    var nonRenderPropositions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var renderers = [];
    var returnedPropositions = [];
    var returnedDecisions = [];
    var onlyRenderThis;
    var i = 0;
    var proposition;
    var items;
    while (renderPropositions.length > i) {
      proposition = renderPropositions[i];
      items = proposition.getItems();
      var _processItems = processItems({
        renderers: renderers,
        returnedPropositions: returnedPropositions,
        returnedDecisions: returnedDecisions,
        items: items,
        proposition: proposition
      });
      renderers = _processItems.renderers;
      returnedPropositions = _processItems.returnedPropositions;
      returnedDecisions = _processItems.returnedDecisions;
      onlyRenderThis = _processItems.onlyRenderThis;
      if (onlyRenderThis) {
        break;
      }
      i += 1;
    }
    if (onlyRenderThis) {
      // if onlyRenderThis is true, that means returnedPropositions and returnedDecisions
      // only contains the proposition that triggered only rendering this. We need to
      // add the other propositions to the returnedPropositions and returnedDecisions.
      renderPropositions.forEach(function (p, index) {
        if (index !== i) {
          p.addToReturnValues(returnedPropositions, returnedDecisions, p.getItems(), false);
        }
      });
    }
    nonRenderPropositions.forEach(function (p) {
      p.addToReturnValues(returnedPropositions, returnedDecisions, p.getItems(), false);
    });
    var render = function render() {
      return Promise.all(renderers.map(function (renderer) {
        return renderer();
      })).then(function (metas) {
        return metas.filter(function (meta) {
          return meta;
        });
      });
    };
    return {
      returnedPropositions: returnedPropositions,
      returnedDecisions: returnedDecisions,
      render: render
    };
  };
};