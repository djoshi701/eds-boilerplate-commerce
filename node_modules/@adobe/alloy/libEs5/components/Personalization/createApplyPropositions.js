"use strict";

exports.default = void 0;
var _index = require("../../utils/index.js");
var _schema = require("../../constants/schema.js");
var _pageWideScope = require("../../constants/pageWideScope.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2022 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var SUPPORTED_SCHEMAS = [_schema.DOM_ACTION, _schema.HTML_CONTENT_ITEM, _schema.MESSAGE_IN_APP];
var _default = exports.default = function _default(_ref) {
  var processPropositions = _ref.processPropositions,
    createProposition = _ref.createProposition,
    renderedPropositions = _ref.renderedPropositions,
    viewCache = _ref.viewCache;
  var filterItemsPredicate = function filterItemsPredicate(item) {
    return SUPPORTED_SCHEMAS.indexOf(item.schema) > -1;
  };
  var updatePropositionItems = function updatePropositionItems(_ref2) {
    var items = _ref2.items,
      metadataForScope = _ref2.metadataForScope;
    return items.filter(filterItemsPredicate).map(function (item) {
      if (item.schema !== _schema.HTML_CONTENT_ITEM) {
        return _objectSpread({}, item);
      }
      if ((0, _index.isObject)(metadataForScope)) {
        return _objectSpread(_objectSpread({}, item), {}, {
          data: _objectSpread(_objectSpread({}, item.data), {}, {
            selector: metadataForScope.selector,
            type: metadataForScope.actionType
          })
        });
      }
      return undefined;
    }).filter(function (item) {
      return item;
    });
  };
  var filterPropositionsPredicate = function filterPropositionsPredicate(proposition) {
    return !(proposition.scope === _pageWideScope.default && proposition.renderAttempted);
  };
  var preparePropositions = function preparePropositions(_ref3) {
    var propositions = _ref3.propositions,
      metadata = _ref3.metadata;
    return propositions.filter(filterPropositionsPredicate).map(function (proposition) {
      if ((0, _index.isNonEmptyArray)(proposition.items)) {
        var id = proposition.id,
          scope = proposition.scope,
          scopeDetails = proposition.scopeDetails;
        return {
          id: id,
          scope: scope,
          scopeDetails: scopeDetails,
          items: updatePropositionItems({
            items: proposition.items,
            metadataForScope: metadata[proposition.scope]
          })
        };
      }
      return proposition;
    }).filter(function (proposition) {
      return (0, _index.isNonEmptyArray)(proposition.items);
    });
  };
  return function (_ref4) {
    var _ref4$propositions = _ref4.propositions,
      propositions = _ref4$propositions === void 0 ? [] : _ref4$propositions,
      _ref4$metadata = _ref4.metadata,
      metadata = _ref4$metadata === void 0 ? {} : _ref4$metadata,
      viewName = _ref4.viewName;
    // We need to immediately call concat so that subsequent sendEvent
    // calls will wait for applyPropositions to complete before executing.
    var renderedPropositionsDeferred = (0, _index.defer)();
    renderedPropositions.concat(renderedPropositionsDeferred.promise);
    var propositionsToExecute = preparePropositions({
      propositions: propositions,
      metadata: metadata
    }).map(function (proposition) {
      return createProposition(proposition);
    });
    return Promise.resolve().then(function () {
      if (viewName) {
        return viewCache.getView(viewName);
      }
      return [];
    }).then(function (additionalPropositions) {
      var _processPropositions = processPropositions([].concat(_toConsumableArray(propositionsToExecute), _toConsumableArray(additionalPropositions))),
        render = _processPropositions.render,
        returnedPropositions = _processPropositions.returnedPropositions;
      render().then(renderedPropositionsDeferred.resolve);
      return {
        propositions: returnedPropositions
      };
    });
  };
};