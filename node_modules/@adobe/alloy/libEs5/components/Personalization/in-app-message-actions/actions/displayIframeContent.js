"use strict";

exports.mobileOverlay = exports.displayHTMLContentInIframe = exports.default = exports.createIframeClickHandler = exports.createIframe = exports.buildStyleFromMobileParameters = void 0;
var _index = require("../../dom-actions/dom/index.js");
var _utils = require("../utils.js");
var _contentType = require("../../../../constants/contentType.js");
var _index2 = require("../../../../utils/index.js");
var _index3 = require("../../../../utils/dom/index.js");
var _index4 = require("../../../../utils/validation/index.js");
var _propositionEventType = require("../../../../constants/propositionEventType.js");
var _eventType = require("../../../../constants/eventType.js");
var _createRedirect = require("../../dom-actions/createRedirect.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var MESSAGING_CONTAINER_ID = "alloy-messaging-container";
var OVERLAY_CONTAINER_ID = "alloy-overlay-container";
var IFRAME_ID = "alloy-content-iframe";
var dismissMessage = function dismissMessage() {
  return [MESSAGING_CONTAINER_ID, OVERLAY_CONTAINER_ID].forEach(_utils.removeElementById);
};
var createIframeClickHandler = exports.createIframeClickHandler = function createIframeClickHandler(interact) {
  var navigateToUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _createRedirect.default)(window);
  return function (event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    var target = event.target;
    var anchor = target.tagName.toLowerCase() === "a" ? target : target.closest("a");
    if (!anchor) {
      return;
    }
    var _parseAnchor = (0, _utils.parseAnchor)(anchor),
      action = _parseAnchor.action,
      interaction = _parseAnchor.interaction,
      link = _parseAnchor.link,
      label = _parseAnchor.label,
      uuid = _parseAnchor.uuid;
    interact(action, {
      label: label,
      id: interaction,
      uuid: uuid,
      link: link
    });
    if (action === "dismiss") {
      dismissMessage();
    }
    if ((0, _index2.isNonEmptyString)(link) && link.length > 0) {
      navigateToUrl(link, true);
    }
  };
};
var createIframe = exports.createIframe = function createIframe(htmlContent, clickHandler) {
  var parser = new DOMParser();
  var htmlDocument = parser.parseFromString(htmlContent, _contentType.TEXT_HTML);
  var scriptTag = htmlDocument.querySelector("script");
  if (scriptTag) {
    scriptTag.setAttribute("nonce", (0, _index.getNonce)());
  }
  var element = (0, _index3.createNode)("iframe", {
    src: URL.createObjectURL(new Blob([htmlDocument.documentElement.outerHTML], {
      type: "text/html"
    })),
    id: IFRAME_ID
  });
  element.addEventListener("load", function () {
    var _ref = element.contentDocument || element.contentWindow.document,
      addEventListener = _ref.addEventListener;
    addEventListener("click", clickHandler);
  });
  return element;
};
var renderMessage = function renderMessage(iframe, webParameters, container, overlay) {
  [{
    id: OVERLAY_CONTAINER_ID,
    element: overlay
  }, {
    id: MESSAGING_CONTAINER_ID,
    element: container
  }, {
    id: IFRAME_ID,
    element: iframe
  }].forEach(function (_ref2) {
    var id = _ref2.id,
      element = _ref2.element;
    var _webParameters$id = webParameters[id],
      _webParameters$id$sty = _webParameters$id.style,
      style = _webParameters$id$sty === void 0 ? {} : _webParameters$id$sty,
      _webParameters$id$par = _webParameters$id.params,
      params = _webParameters$id$par === void 0 ? {} : _webParameters$id$par;
    (0, _index2.assign)(element.style, style);
    var _params$parentElement = params.parentElement,
      parentElement = _params$parentElement === void 0 ? "body" : _params$parentElement,
      _params$insertionMeth = params.insertionMethod,
      insertionMethod = _params$insertionMeth === void 0 ? "appendChild" : _params$insertionMeth,
      _params$enabled = params.enabled,
      enabled = _params$enabled === void 0 ? true : _params$enabled;
    var parent = document.querySelector(parentElement);
    if (enabled && parent && typeof parent[insertionMethod] === "function") {
      parent[insertionMethod](element);
    }
  });
};
var buildStyleFromMobileParameters = exports.buildStyleFromMobileParameters = function buildStyleFromMobileParameters(mobileParameters) {
  var verticalAlign = mobileParameters.verticalAlign,
    width = mobileParameters.width,
    horizontalAlign = mobileParameters.horizontalAlign,
    backdropColor = mobileParameters.backdropColor,
    height = mobileParameters.height,
    cornerRadius = mobileParameters.cornerRadius,
    horizontalInset = mobileParameters.horizontalInset,
    verticalInset = mobileParameters.verticalInset,
    _mobileParameters$uiT = mobileParameters.uiTakeover,
    uiTakeover = _mobileParameters$uiT === void 0 ? false : _mobileParameters$uiT;
  var style = {
    width: width ? width + "%" : "100%",
    backgroundColor: backdropColor || "rgba(0, 0, 0, 0.5)",
    borderRadius: cornerRadius ? cornerRadius + "px" : "0px",
    border: "none",
    position: uiTakeover ? "fixed" : "relative",
    overflow: "hidden"
  };
  if (horizontalAlign === "left") {
    style.left = horizontalInset ? horizontalInset + "%" : "0";
  } else if (horizontalAlign === "right") {
    style.right = horizontalInset ? horizontalInset + "%" : "0";
  } else if (horizontalAlign === "center") {
    style.left = "50%";
    style.transform = "translateX(-50%)";
  }
  if (verticalAlign === "top") {
    style.top = verticalInset ? verticalInset + "%" : "0";
  } else if (verticalAlign === "bottom") {
    style.position = "fixed";
    style.bottom = verticalInset ? verticalInset + "%" : "0";
  } else if (verticalAlign === "center") {
    style.top = "50%";
    style.transform = (horizontalAlign === "center" ? style.transform + " " : "") + "translateY(-50%)";
    style.display = "flex";
    style.alignItems = "center";
    style.justifyContent = "center";
  }
  if (height) {
    style.height = height + "vh";
  } else {
    style.height = "100%";
  }
  return style;
};
var mobileOverlay = exports.mobileOverlay = function mobileOverlay(mobileParameters) {
  var backdropOpacity = mobileParameters.backdropOpacity,
    backdropColor = mobileParameters.backdropColor;
  var opacity = backdropOpacity || 0.5;
  var color = backdropColor || "#FFFFFF";
  var style = {
    position: "fixed",
    top: "0",
    left: "0",
    width: "100%",
    height: "100%",
    background: "transparent",
    opacity: opacity,
    backgroundColor: color
  };
  return style;
};
var REQUIRED_PARAMS = ["enabled", "parentElement", "insertionMethod"];
var isValidWebParameters = function isValidWebParameters(webParameters) {
  if (!webParameters) {
    return false;
  }
  var ids = Object.keys(webParameters);
  if (!(0, _index2.includes)(ids, MESSAGING_CONTAINER_ID)) {
    return false;
  }
  if (!(0, _index2.includes)(ids, OVERLAY_CONTAINER_ID)) {
    return false;
  }
  var valuesArray = (0, _index2.values)(webParameters);
  for (var i = 0; i < valuesArray.length; i += 1) {
    if (!(0, _index4.objectOf)(valuesArray[i], "style")) {
      return false;
    }
    if (!(0, _index4.objectOf)(valuesArray[i], "params")) {
      return false;
    }
    for (var j = 0; j < REQUIRED_PARAMS.length; j += 1) {
      if (!(0, _index4.objectOf)(valuesArray[i].params, REQUIRED_PARAMS[j])) {
        return false;
      }
    }
  }
  return true;
};
var generateWebParameters = function generateWebParameters(mobileParameters) {
  if (!mobileParameters) {
    return undefined;
  }
  var _mobileParameters$uiT2 = mobileParameters.uiTakeover,
    uiTakeover = _mobileParameters$uiT2 === void 0 ? false : _mobileParameters$uiT2;
  return _defineProperty(_defineProperty(_defineProperty({}, IFRAME_ID, {
    style: {
      border: "none",
      width: "100%",
      height: "100%"
    },
    params: {
      enabled: true,
      parentElement: "#alloy-messaging-container",
      insertionMethod: "appendChild"
    }
  }), MESSAGING_CONTAINER_ID, {
    style: buildStyleFromMobileParameters(mobileParameters),
    params: {
      enabled: true,
      parentElement: "body",
      insertionMethod: "appendChild"
    }
  }), OVERLAY_CONTAINER_ID, {
    style: mobileOverlay(mobileParameters),
    params: {
      enabled: uiTakeover === true,
      parentElement: "body",
      insertionMethod: "appendChild"
    }
  });
};

// eslint-disable-next-line default-param-last
var displayHTMLContentInIframe = exports.displayHTMLContentInIframe = function displayHTMLContentInIframe() {
  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var interact = arguments.length > 1 ? arguments[1] : undefined;
  dismissMessage();
  var content = settings.content,
    contentType = settings.contentType,
    mobileParameters = settings.mobileParameters;
  var webParameters = settings.webParameters;
  if (contentType !== _contentType.TEXT_HTML) {
    return;
  }
  var container = (0, _index3.createNode)("div", {
    id: MESSAGING_CONTAINER_ID
  });
  var iframe = createIframe(content, createIframeClickHandler(interact));
  var overlay = (0, _index3.createNode)("div", {
    id: OVERLAY_CONTAINER_ID
  });
  if (!isValidWebParameters(webParameters)) {
    webParameters = generateWebParameters(mobileParameters);
  }
  if (!webParameters) {
    return;
  }
  renderMessage(iframe, webParameters, container, overlay);
};
var _default = exports.default = function _default(settings, collect) {
  return new Promise(function (resolve) {
    var meta = settings.meta;
    displayHTMLContentInIframe(settings, function (action, propositionAction) {
      var propositionEventTypes = {};
      propositionEventTypes[_propositionEventType.PropositionEventType.INTERACT] = _eventType.EVENT_TYPE_TRUE;
      if (Object.values(_propositionEventType.PropositionEventType).indexOf(action) !== -1) {
        propositionEventTypes[action] = _eventType.EVENT_TYPE_TRUE;
      }
      collect({
        decisionsMeta: [meta],
        propositionAction: propositionAction,
        eventType: _eventType.INTERACT,
        propositionEventTypes: Object.keys(propositionEventTypes)
      });
    });
    resolve({
      meta: meta
    });
  });
};