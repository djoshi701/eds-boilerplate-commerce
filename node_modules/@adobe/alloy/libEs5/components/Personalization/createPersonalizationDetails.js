"use strict";

exports.default = void 0;
var _index = require("../../utils/index.js");
var _surfaceUtils = require("./utils/surfaceUtils.js");
var _pageWideScope = require("../../constants/pageWideScope.js");
var _schema = require("../../constants/schema.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var addPageWideScope = function addPageWideScope(scopes) {
  if (!(0, _index.includes)(scopes, _pageWideScope.default)) {
    scopes.push(_pageWideScope.default);
  }
};
var addPageSurface = function addPageSurface(surfaces, getPageLocation) {
  var pageSurface = (0, _surfaceUtils.buildPageSurface)(getPageLocation);
  if (!(0, _index.includes)(surfaces, pageSurface)) {
    surfaces.push(pageSurface);
  }
};
var dedupe = function dedupe(array) {
  return array.filter(function (item, pos) {
    return array.indexOf(item) === pos;
  });
};
var _default = exports.default = function _default(_ref) {
  var getPageLocation = _ref.getPageLocation,
    renderDecisions = _ref.renderDecisions,
    decisionScopes = _ref.decisionScopes,
    personalization = _ref.personalization,
    event = _ref.event,
    _isCacheInitialized = _ref.isCacheInitialized,
    logger = _ref.logger;
  var viewName = event.getViewName();
  return {
    isRenderDecisions: function isRenderDecisions() {
      return renderDecisions;
    },
    isSendDisplayEvent: function isSendDisplayEvent() {
      return !!personalization.sendDisplayEvent;
    },
    shouldIncludeRenderedPropositions: function shouldIncludeRenderedPropositions() {
      return !!personalization.includeRenderedPropositions;
    },
    getViewName: function getViewName() {
      return viewName;
    },
    hasScopes: function hasScopes() {
      return decisionScopes.length > 0 || (0, _index.isNonEmptyArray)(personalization.decisionScopes);
    },
    hasSurfaces: function hasSurfaces() {
      return (0, _index.isNonEmptyArray)(personalization.surfaces);
    },
    hasViewName: function hasViewName() {
      return (0, _index.isNonEmptyString)(viewName);
    },
    createQueryDetails: function createQueryDetails() {
      var scopes = _toConsumableArray(decisionScopes);
      if ((0, _index.isNonEmptyArray)(personalization.decisionScopes)) {
        scopes.push.apply(scopes, _toConsumableArray(personalization.decisionScopes));
      }
      var eventSurfaces = (0, _surfaceUtils.normalizeSurfaces)(personalization.surfaces, getPageLocation, logger);
      if (this.shouldRequestDefaultPersonalization()) {
        addPageWideScope(scopes);
        addPageSurface(eventSurfaces, getPageLocation);
      }
      var schemas = [_schema.DEFAULT_CONTENT_ITEM, _schema.HTML_CONTENT_ITEM, _schema.JSON_CONTENT_ITEM, _schema.REDIRECT_ITEM, _schema.RULESET_ITEM, _schema.MESSAGE_IN_APP, _schema.MESSAGE_FEED_ITEM];
      if ((0, _index.includes)(scopes, _pageWideScope.default)) {
        schemas.push(_schema.DOM_ACTION);
      }
      return {
        schemas: schemas,
        decisionScopes: dedupe(scopes),
        surfaces: dedupe(eventSurfaces)
      };
    },
    isCacheInitialized: function isCacheInitialized() {
      return _isCacheInitialized;
    },
    shouldFetchData: function shouldFetchData() {
      return this.hasScopes() || this.hasSurfaces() || this.shouldRequestDefaultPersonalization();
    },
    shouldUseCachedData: function shouldUseCachedData() {
      return this.hasViewName() && !this.shouldFetchData();
    },
    shouldRequestDefaultPersonalization: function shouldRequestDefaultPersonalization() {
      return personalization.defaultPersonalizationEnabled || !this.isCacheInitialized() && personalization.defaultPersonalizationEnabled !== false;
    }
  };
};