"use strict";

exports.default = void 0;
var _createPreprocessors = require("./createPreprocessors.js");
var _index = require("../../utils/index.js");
/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var modules = _ref.modules,
    _ref$preprocessors = _ref.preprocessors,
    preprocessors = _ref$preprocessors === void 0 ? (0, _createPreprocessors.default)() : _ref$preprocessors,
    logger = _ref.logger;
  var logActionError = function logActionError(action, error) {
    if (logger.enabled) {
      var details = JSON.stringify(action);
      var message = error.message,
        stack = error.stack;
      var errorMessage = "Failed to execute action " + details + ". " + message + " " + (stack ? "\n " + stack : "");
      logger.warn(errorMessage);
    }
  };
  var logActionCompleted = function logActionCompleted(action) {
    if (logger.enabled) {
      var details = JSON.stringify(action);
      logger.info("Action " + details + " executed.");
    }
  };
  var getExecuteAction = function getExecuteAction(schema, type) {
    if (!modules[schema] || !modules[schema][type]) {
      return function () {
        return Promise.reject(new Error("Action \"" + type + "\" not found for schema \"" + schema + "\""));
      };
    }
    return modules[schema][type];
  };
  var applyPreprocessors = function applyPreprocessors(action) {
    var schema = action.schema;
    var preprocessorsList = preprocessors[schema];
    if (!schema || !(preprocessorsList instanceof Array) || preprocessorsList.length === 0) {
      return action;
    }
    return preprocessorsList.reduce(function (processed, fn) {
      return (0, _index.assign)(processed, fn(processed));
    }, action);
  };
  var executeAction = function executeAction(action) {
    var processedAction = applyPreprocessors(action);
    var type = processedAction.type,
      schema = processedAction.schema;
    var execute = getExecuteAction(schema, type);
    return execute(processedAction).then(function (result) {
      logActionCompleted(processedAction);
      return result;
    }).catch(function (error) {
      logActionError(processedAction, error);
      throw error;
    });
  };
  return {
    executeAction: executeAction
  };
};