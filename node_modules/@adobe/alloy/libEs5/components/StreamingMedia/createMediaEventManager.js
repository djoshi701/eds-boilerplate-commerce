"use strict";

exports.default = void 0;
var _eventTypes = require("./constants/eventTypes.js");
var _createMediaRequest = require("./createMediaRequest.js");
var _index = require("../../utils/index.js");
var _index2 = require("../../utils/request/index.js");
/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var _default = exports.default = function _default(_ref) {
  var config = _ref.config,
    eventManager = _ref.eventManager,
    consent = _ref.consent,
    sendEdgeNetworkRequest = _ref.sendEdgeNetworkRequest,
    setTimestamp = _ref.setTimestamp;
  return {
    createMediaEvent: function createMediaEvent(_ref2) {
      var options = _ref2.options;
      var event = eventManager.createEvent();
      var xdm = options.xdm;
      setTimestamp(xdm);
      event.setUserXdm(xdm);
      if (xdm.eventType === _eventTypes.default.AD_START) {
        var advertisingDetails = options.xdm.mediaCollection.advertisingDetails;
        event.mergeXdm({
          mediaCollection: {
            advertisingDetails: {
              playerName: advertisingDetails.playerName || config.streamingMedia.playerName
            }
          }
        });
      }
      return event;
    },
    createMediaSession: function createMediaSession(options) {
      var _config$streamingMedi = config.streamingMedia,
        playerName = _config$streamingMedi.playerName,
        channel = _config$streamingMedi.channel,
        appVersion = _config$streamingMedi.appVersion;
      var event = eventManager.createEvent();
      var sessionDetails = options.xdm.mediaCollection.sessionDetails;
      event.setUserXdm(options.xdm);
      event.mergeXdm({
        eventType: _eventTypes.default.SESSION_START,
        mediaCollection: {
          sessionDetails: {
            playerName: sessionDetails.playerName || playerName,
            channel: sessionDetails.channel || channel,
            appVersion: sessionDetails.appVersion || appVersion
          }
        }
      });
      return event;
    },
    augmentMediaEvent: function augmentMediaEvent(_ref3) {
      var event = _ref3.event,
        playerId = _ref3.playerId,
        getPlayerDetails = _ref3.getPlayerDetails,
        sessionID = _ref3.sessionID;
      if (!playerId || !getPlayerDetails) {
        return event;
      }
      var _getPlayerDetails = getPlayerDetails({
          playerId: playerId
        }),
        playhead = _getPlayerDetails.playhead,
        qoeDataDetails = _getPlayerDetails.qoeDataDetails;
      event.mergeXdm({
        mediaCollection: {
          playhead: (0, _index.toInteger)(playhead),
          qoeDataDetails: qoeDataDetails,
          sessionID: sessionID
        }
      });
      return event;
    },
    trackMediaSession: function trackMediaSession(_ref4) {
      var event = _ref4.event,
        mediaOptions = _ref4.mediaOptions;
      return eventManager.sendEvent(event, {
        mediaOptions: mediaOptions
      });
    },
    trackMediaEvent: function trackMediaEvent(_ref5) {
      var event = _ref5.event,
        action = _ref5.action;
      var mediaRequestPayload = (0, _index2.createDataCollectionRequestPayload)();
      var request = (0, _createMediaRequest.default)({
        mediaRequestPayload: mediaRequestPayload,
        action: action
      });
      mediaRequestPayload.addEvent(event);
      event.finalize();
      return consent.awaitConsent().then(function () {
        return sendEdgeNetworkRequest({
          request: request
        }).then(function () {
          return {};
        });
      });
    }
  };
};