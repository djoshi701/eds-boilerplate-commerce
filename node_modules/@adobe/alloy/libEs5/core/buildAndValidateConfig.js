"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
exports.default = void 0;
var _index = require("../utils/index.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var CONFIG_DOC_URI = "https://adobe.ly/3sHh553";
var transformOptions = function transformOptions(_ref) {
  var combinedConfigValidator = _ref.combinedConfigValidator,
    options = _ref.options,
    logger = _ref.logger;
  try {
    var validator = combinedConfigValidator.noUnknownFields().required();
    return validator.call({
      logger: logger
    }, options);
  } catch (e) {
    throw new Error("Resolve these configuration problems:\n\t - " + e.message.split("\n").join("\n\t - ") + "\nFor configuration documentation see: " + CONFIG_DOC_URI);
  }
};
var buildAllOnInstanceConfiguredExtraParams = function buildAllOnInstanceConfiguredExtraParams(config, logger, componentCreators) {
  return componentCreators.reduce(function (memo, _ref2) {
    var buildOnInstanceConfiguredExtraParams = _ref2.buildOnInstanceConfiguredExtraParams;
    if (buildOnInstanceConfiguredExtraParams) {
      (0, _index.assign)(memo, buildOnInstanceConfiguredExtraParams({
        config: config,
        logger: logger
      }));
    }
    return memo;
  }, {});
};
var wrapLoggerInQueue = function wrapLoggerInQueue(logger) {
  var queue = [];
  var queuedLogger = {
    get enabled() {
      return logger.enabled;
    },
    flush: function flush() {
      queue.forEach(function (_ref3) {
        var method = _ref3.method,
          args = _ref3.args;
        return logger[method].apply(logger, _toConsumableArray(args));
      });
    }
  };
  Object.keys(logger).filter(function (key) {
    return typeof logger[key] === "function";
  }).forEach(function (method) {
    queuedLogger[method] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      queue.push({
        method: method,
        args: args
      });
    };
  });
  return queuedLogger;
};
var _default = exports.default = function _default(_ref4) {
  var options = _ref4.options,
    componentCreators = _ref4.componentCreators,
    coreConfigValidators = _ref4.coreConfigValidators,
    createConfig = _ref4.createConfig,
    logger = _ref4.logger,
    setDebugEnabled = _ref4.setDebugEnabled;
  // We wrap the logger in a queue in case debugEnabled is set in the config
  // but we need to log something before the config is created.
  var queuedLogger = wrapLoggerInQueue(logger);
  var combinedConfigValidator = componentCreators.map(function (_ref5) {
    var configValidators = _ref5.configValidators;
    return configValidators;
  }).filter(function (configValidators) {
    return configValidators;
  }).reduce(function (validator, configValidators) {
    return validator.concat(configValidators);
  }, coreConfigValidators);
  var config = createConfig(transformOptions({
    combinedConfigValidator: combinedConfigValidator,
    options: options,
    logger: queuedLogger
  }));
  setDebugEnabled(config.debugEnabled, {
    fromConfig: true
  });
  queuedLogger.flush();
  // eslint-disable-next-line no-underscore-dangle
  var extraParams = buildAllOnInstanceConfiguredExtraParams(config, logger, componentCreators);
  logger.logOnInstanceConfigured(_objectSpread(_objectSpread({}, extraParams), {}, {
    config: config
  }));
  return config;
};